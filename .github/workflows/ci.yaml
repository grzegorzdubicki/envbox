name: ci

on:
  push:
    branches:
      - arm64

  pull_request:

  workflow_dispatch:
    
permissions:
  actions: read
  checks: none
  contents: read
  deployments: none
  issues: none
  packages: write
  pull-requests: none
  repository-projects: none
  security-events: write
  statuses: none

# Cancel in-progress runs for pull requests when developers push
# additional changes
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  lint:
    runs-on: ${{ github.repository_owner == 'coder' && 'ubuntu-latest-8-cores' || 'ubuntu-latest' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Install Go!
      - uses: actions/setup-go@v3
        with:
          go-version: "~1.20"

      # Check for Go linting errors!
      - name: Lint Go
        uses: golangci/golangci-lint-action@v3.3.1
        with:
          version: v1.51.0
          args: "--out-${NO_FUTURE}format colored-line-number"

      - name: Lint shell scripts
        uses: ludeeus/action-shellcheck@2.0.0
        env:
          SHELLCHECK_OPTS: --external-sources
        with:
          ignore: node_modules

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.9
          terraform_wrapper: false

      - name: Terraform init
        run: terraform init

      - name: Terraform validate
        run: terraform validate

  fmt:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.9
          terraform_wrapper: false

      - name: Install markdownfmt
        run: go install github.com/Kunde21/markdownfmt/v3/cmd/markdownfmt@latest

      - name: make fmt
        run: |
          export PATH=${PATH}:$(go env GOPATH)/bin
          make --output-sync -j -B fmt

      - name: Check for unstaged files
        run: ./scripts/check_unstaged.sh

  unit-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-go@v3
        with:
          go-version: "~1.20"

      - name: Echo Go Cache Paths
        id: go-cache-paths
        run: |
          echo "::set-output name=GOCACHE::$(go env GOCACHE)"
          echo "::set-output name=GOMODCACHE::$(go env GOMODCACHE)"

      - name: Go Build Cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.go-cache-paths.outputs.GOCACHE }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.**', '**.go') }}

      - name: Go Mod Cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.go-cache-paths.outputs.GOMODCACHE }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

      - name: Build for ARM64
        run: |
          env GOOS=linux GOARCH=arm64 go build -v -o envbox

      - name: Run unit tests
        id: test
        shell: bash
        run: go test ./...

  integration-tests:
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    steps:
      - name: Install  dependencies
        run: sudo apt update && sudo apt install -y gcc
      - uses: actions/checkout@v3

      - uses: actions/setup-go@v3
        with:
          go-version: "1.20.5"

      - name: Build for ARM64
        run: |
          env GOOS=linux GOARCH=arm64 go build -v -o envbox
      # Please add other necessary steps below for integration-tests
